<?php
// $Id$

//////////////////////////////////////////////////////////////////////////////
// Module settings

define('RDF_SCHEMA_URI', variable_get('rdf_schema_uri', url('rdf/schema', array('absolute' => TRUE)) .'/'));
define('RDF_SCHEMA_MODULE_URI', 'http://drupal.org/project/rdf#schema');

//////////////////////////////////////////////////////////////////////////////
// Core API hooks

/**
 * Implementation of hook_perm().
 */
function rdf_schema_perm() {
  return array(
    'export site settings',
    'import site settings',
    'export enabled modules',
    'import enabled modules',
  );
}

/**
 * Implementation of hook_menu().
 */
function rdf_schema_menu() {
  return array(
    'rdf/schema' => array(
      'title' => 'RDF schema',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access RDF data'),
      'page callback' => 'rdf_export',
      'page arguments' => array('rdf_schema_data', 'schema'),
      'file' => '../../rdf.pages.inc', // HACK
    ),
    'rdf/settings' => array(
      'type' => MENU_CALLBACK,
      'access callback' => 'rdf_schema_menu_access',
      'access arguments' => array('export site settings', 'import site settings'),
      'page callback' => 'rdf_schema_export_settings',
      'file' => 'rdf_schema.pages.inc',
    ),
    'rdf/modules' => array(
      'type' => MENU_CALLBACK,
      'access callback' => 'rdf_schema_menu_access',
      'access arguments' => array('export enabled modules', 'import enabled modules'),
      'page callback' => 'rdf_schema_export_modules',
      'file' => 'rdf_schema.pages.inc',
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function rdf_schema_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    // Administer >> Site configuration >> RDF settings
    case 'rdf_admin_settings':
      $form['schema'] = array('#type' => 'fieldset', '#title' => t('RDF Schema'), '#collapsible' => TRUE, '#collapsed' => FALSE, '#weight' => 10);
      $form['schema']['rdf_schema_uri'] = array('#type' => 'textfield', '#title' => t('RDFS base URI'), '#default_value' => RDF_SCHEMA_URI, '#maxlength' => 255, '#required' => TRUE, '#description' => t('') /* TODO */);
      break;

    // Administer >> User management >> Profiles >> Edit
    case 'profile_field_form':
      // The submitted value is stored using the callback function defined below.
      $rdf_mapping = isset($form['fid']['#value']) ? variable_get('rdf_schema_property_profile_'. $form['fid']['#value'], '') : '';
      $form['rdf_mapping'] = array('#type' => 'fieldset', '#title' => t('RDF mapping'), '#collapsible' => TRUE, '#collapsed' => FALSE, '#weight' => 1);
      $form['rdf_mapping']['rdf_property'] = array('#type' => 'textfield', '#title' => t('RDF property'), '#default_value' => rdf_uri_to_qname($rdf_mapping, FALSE, $rdf_mapping), '#maxlength' => 255, '#description' => t('') /* TODO */);
      $form['submit']['#weight'] = 40;
      $form['#validate'][] = 'rdf_schema_property_form_validate';
      $form['#submit'][] = 'rdf_schema_profile_field_form_submit';
      break;

    // Administer >> Content management >> Taxonomy >> Edit vocabulary
    case 'taxonomy_form_vocabulary':
      // The submitted value is stored in our implementation of hook_taxonomy()
      $rdf_mapping = isset($form['vid']['#value']) ? variable_get('rdf_schema_property_vocabulary_'. $form['vid']['#value'], '') : '';
      $form['rdf_mapping'] = array('#type' => 'fieldset', '#title' => t('RDF mapping'), '#collapsible' => TRUE, '#collapsed' => FALSE, '#weight' => 1);
      $form['rdf_mapping']['rdf_property'] = array('#type' => 'textfield', '#title' => t('RDF property'), '#default_value' => rdf_uri_to_qname($rdf_mapping, FALSE, $rdf_mapping), '#maxlength' => 255, '#description' => t('') /* TODO */);
      $form['submit']['#weight'] = 40;
      $form['delete']['#weight'] = 45;
      $form['#validate'][] = 'rdf_schema_property_form_validate';
      break;

    // Administer >> Content management >> Content types >> Edit
    case 'node_type_form':
      // The submitted value is auto-saved by node.module as a configuration variable with a name in the form 'rdf_schema_class_TYPE'
      $rdf_mapping = variable_get('rdf_schema_class_'. $form['#node_type']->type, '');
      $form['rdf_mapping'] = array('#type' => 'fieldset', '#title' => t('RDF mapping'), '#collapsible' => TRUE, '#collapsed' => TRUE, '#weight' => 1);
      $form['rdf_mapping']['rdf_schema_class'] = array('#type' => 'textfield', '#title' => t('RDF class'), '#default_value' => rdf_uri_to_qname($rdf_mapping, FALSE, $rdf_mapping), '#maxlength' => 255, '#description' => t('') /* TODO */);
      $form['#validate'][] = 'rdf_schema_class_form_validate';
      break;

    // Administer >> Content management >> Content types >> (content type) >> Manage fields >> Configure
    case 'content_field_edit_form':
      // The submitted value is stored using the callback function defined below.
      $rdf_mapping = variable_get('rdf_schema_property_content_'. $form['field_name']['#value'], '');
      $form['rdf_mapping'] = array('#type' => 'fieldset', '#title' => t('RDF mapping'), '#collapsible' => FALSE, '#collapsed' => FALSE, '#weight' => 1);
      $form['rdf_mapping']['rdf_property'] = array('#type' => 'textfield', '#title' => t('RDF property'), '#default_value' => rdf_uri_to_qname($rdf_mapping, FALSE, $rdf_mapping), '#maxlength' => 255, '#description' => t('') /* TODO */);
      $form['submit']['#weight'] = 90;
      $form['#validate'][] = 'rdf_schema_property_form_validate';
      $form['#submit'][] = 'rdf_schema_content_field_form_submit';
      break;
  }
}

/**
 * Implementation of hook_taxonomy().
 */
function rdf_schema_taxonomy($op, $type, $array = NULL) {
  if ($type == 'vocabulary') {
    switch ($op) {
      case 'insert':
      case 'update':
        if (!empty($array['rdf_property'])) {
          variable_set('rdf_schema_property_vocabulary_'. $array['vid'], rdf_qname_to_uri($array['rdf_property']));
        }
        else {
          variable_del('rdf_schema_property_vocabulary_'. $array['vid']);
        }
        break;
      case 'delete':
        variable_del('rdf_schema_property_vocabulary_'. $array['vid']);
        break;
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
// Forms API callbacks

/**
 * @see rdf_schema_form_alter()
 */
function rdf_schema_class_form_validate($form, &$form_state) {
  extract($form_state['values'], EXTR_SKIP | EXTR_REFS);
  $rdf_schema_class = trim($rdf_schema_class);

  if ($rdf_schema_class != '' && !rdf_is_valid_uri($rdf_schema_class) && !rdf_is_valid_curie($rdf_schema_class)) {
    form_set_error('rdf_schema_class', t('RDF class is not a valid URI or CURIE.'));
  }
  else {
    $rdf_schema_class = rdf_qname_to_uri($rdf_schema_class);
  }
}

/**
 * @see rdf_schema_form_alter()
 */
function rdf_schema_property_form_validate($form, &$form_state) {
  extract($form_state['values'], EXTR_SKIP | EXTR_REFS);
  $rdf_property = trim($rdf_property);

  if ($rdf_property != '' && !rdf_is_valid_uri($rdf_property) && !rdf_is_valid_curie($rdf_property)) {
    form_set_error('rdf_property', t('RDF property is not a valid URI or CURIE.'));
  }
}

/**
 * @see rdf_schema_form_alter()
 */
function rdf_schema_profile_field_form_submit($form, &$form_state) {
  extract($form_state['values'], EXTR_SKIP | EXTR_REFS);

  if (!empty($rdf_property)) {
    variable_set('rdf_schema_property_profile_'. $fid, rdf_qname_to_uri($rdf_property));
  }
  else {
    variable_del('rdf_schema_property_profile_'. $fid);
  }
}

/**
 * @see rdf_schema_form_alter()
 */
function rdf_schema_content_field_form_submit($form, &$form_state) {
  extract($form_state['values'], EXTR_SKIP | EXTR_REFS);

  if (!empty($rdf_property)) {
    variable_set('rdf_schema_property_content_'. $field_name, rdf_qname_to_uri($rdf_property));
  }
  else {
    variable_del('rdf_schema_property_content_'. $field_name);
  }
}

//////////////////////////////////////////////////////////////////////////////
// RDF API hooks

/**
 * Implementation of hook_rdf_namespaces().
 */
function rdf_schema_rdf_namespaces() {
  $namespaces = array('drupal' => RDF_SCHEMA_URI);
  foreach (rdf_schema_get_entities() as $entity) {
    $namespaces[$entity] = RDF_SCHEMA_URI . $entity .'#';
  }
  return $namespaces;
}

/**
 * Implementation of hook_rdf_contexts().
 */
function rdf_schema_rdf_contexts() {
  return array(RDF_SITE_URI, RDF_SCHEMA_URI);
}

/**
 * Implementation of hook_rdf_classes().
 */
function rdf_schema_rdf_classes() {
  return array(
    'user' => array(
      'title'   => t('User'),
      'module'  => 'user',
      'table'   => 'users',
      'query'   => 'SELECT uid FROM {users} WHERE uid > 0',
      'uri'     => 'user/%uid',
      'enabled' => TRUE,
    ),
    'vocabulary' => array(
      'title'   => t('Taxonomy vocabulary'),
      'module'  => 'taxonomy',
      'table'   => 'vocabulary',
      'query'   => 'SELECT vid FROM {vocabulary}',
      // NOTE: Drupal vocabularies don't actually have dereferenceable URIs
      'uri'     => 'taxonomy/vocabulary/%vid',
      'enabled' => FALSE, // TODO
    ),
    'term' => array(
      'title'   => t('Taxonomy term'),
      'module'  => 'taxonomy',
      'table'   => 'term_data',
      'query'   => 'SELECT tid FROM {term_data}',
      'uri'     => 'taxonomy/term/%tid',
      'enabled' => FALSE, // TODO
    ),
    'node' => array(
      'title'   => t('Node'),
      'module'  => 'node',
      'table'   => 'node',
      'query'   => 'SELECT nid FROM {node}',
      'uri'     => 'node/%nid',
      'load'    => 'node_load',
      'enabled' => TRUE,
    ),
    'comment' => array(
      'title'   => t('Comment'),
      'module'  => 'comment',
      'table'   => 'comments',
      'query'   => 'SELECT nid, cid FROM {comments}',
      'uri'     => 'node/%nid#comment-%cid',
      'enabled' => FALSE, // TODO
    ),
    'path' => array(
      'title'   => t('URL alias'),
      'module'  => 'path',
      'table'   => 'url_alias',
      'query'   => 'SELECT dst FROM {url_alias}',
      'uri'     => '%dst',
      'enabled' => FALSE, // TODO
    ),
    'variable' => array(
      'title'   => t('Setting'),
      'module ' => 'system',
      'table'   => 'variable',
      'query'   => 'SELECT name FROM {variable}',
      'uri'     => 'rdf/variable/%name',
      'enabled' => FALSE, // TODO
    ),
  );
}

/**
 * Implementation of hook_rdf_properties().
 */
function rdf_schema_rdf_properties() {
  return array(
    // TODO
  );
}

/**
 * Implementation of hook_rdf_resources().
 */
function rdf_schema_rdf_resources($context) {
  switch ($context) {
    case NULL:
      return array(); // FIXME
      //return array_merge(rdf_schema_get_resources(), rdf_schema_get_classes());
    case RDF_SITE_URI:
      return rdf_schema_get_resources();
    case RDF_SCHEMA_URI:
      return rdf_schema_get_classes();
  }
}

//////////////////////////////////////////////////////////////////////////////
// Miscellaneous helpers

function rdf_schema_menu_access($perm_get, $perm_post) {
  return user_access($_SERVER['REQUEST_METHOD'] == 'POST' ? $perm_post : $perm_get);
}
