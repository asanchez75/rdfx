<?php
// $Id$

//////////////////////////////////////////////////////////////////////////////
// Core API hooks

/**
 * Implementation of hook_enable().
 */
function rdf_enable() {
  drupal_set_message(t('RDF API successfully installed. Please review the available <a href="@settings">configuration settings</a>.', array('@settings' => url('admin/settings/rdf'))));
}

/**
 * Implementation of hook_install().
 */
function rdf_install() {
  db_query("UPDATE {system} SET weight = -10 WHERE name = 'rdf' AND type = 'module'");

  drupal_install_schema('rdf');
  variable_set('rdf_db_repository[local]', array('dc:title' => t('Local'), 'dc:description' => ''));
}

/**
 * Implementation of hook_uninstall().
 */
function rdf_uninstall() {
  drupal_uninstall_schema('rdf');
  variable_del('rdf_db_repository[local]');
}

/**
 * Implementation of hook_requirements().
 */
function rdf_requirements($phase) {
  $status = array();
  $t = get_t(); // Ensure translations don't break at install time

  if ($phase == 'runtime') {
    $arc2 = class_exists('ARC2');
    $status['rdf'] = array(
      'title' => $t('RDF library'),
      'value' => $arc2 ? $t('ARC2 @version', array('@version' => ARC2::getVersion())) : $t('Not installed'),
      'description' => $arc2 ? '' : $t('<a href="@arc2">ARC2</a> is not available. It is recommended that you install this library in order to enable support for more RDF formats and for SPARQL queries. To install, <a href="@download">download</a> the latest version of the library and unzip it to %path under the Drupal directory. For more information please refer to the <a href="@handbook">handbook</a>.', array('@arc2' => 'http://arc.semsol.org/', '@download' => 'http://arc.semsol.org/download', '%path' => RDF_ARC2_PATH . '/', '@handbook' => 'http://drupal.org/node/219852')),
      'severity' => $arc2 ? REQUIREMENT_OK : REQUIREMENT_WARNING,
    );
  }

  return $status;
}

//////////////////////////////////////////////////////////////////////////////
// Schema API hooks

/**
 * Implementation of hook_schema().
 */
function rdf_schema() {
  return array(
    'rdf_namespaces' => array(
      'description' => t(''),
      'fields' => array(
        'prefix'  => array(
          'description' => t('Namespace prefix.'),
          'type' => 'varchar',
          'length' => 64,
          'not null' => TRUE,
        ),
        'uri'  => array(
          'description' => t('Namespace URI.'),
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
      ),
      'primary key' => array('prefix'),
      'indexes' => array('uri' => array('uri')),
    ),

    'rdf_resources' => array(
      'description' => t(''),
      'fields' => array(
        'rid'  => array(
          'description' => t('Resource ID.'),
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'uri'  => array(
          'description' => t('Resource URI.'),
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
      ),
      'primary key' => array('rid'),
      'unique keys' => array('uri' => array('uri')),
    ),

    'rdf_data' => array(
      'description' => t(''),
      'fields' => array(
        'did'  => array(
          'description' => t('The datum, or reified statement, identifier for this statement.'),
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'uid'  => array(     // added in 6.x-1.0-alpha4
          'description' => t('The user ID from {users}.uid.'),
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'created'  => array( // added in 6.x-1.0-alpha4
          'description' => t('The Unix timestamp when the statement was created.'),
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'gid'  => array(
          'description' => t('The graph/context URI from {rdf_resources}.rid.'),
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'sid'  => array(
          'description' => t('The subject URI from {rdf_resources}.rid.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'pid'  => array(
          'description' => t('The predicate URI from {rdf_resources}.rid.'),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'oid'  => array(
          'description' => t('The object URI from {rdf_resources}.rid.'),
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'tid'  => array(
          'description' => t('The object literal datatype URI from {rdf_resources}.rid.'),
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'lang' => array(
          'description' => t('The object literal language.'),
          'type' => 'varchar',
          'length' => 12,
        ),
        'data' => array(
          'description' => t('The object literal data.'),
          'type' => 'text',
          'size' => 'big',
        ),
      ),
      'primary key' => array('did'),
      'indexes' => array(
        'gspo' => array('gid', 'sid', 'pid', 'oid'),
        'gpos' => array('gid', 'pid', 'oid', 'sid'),
        'gosp' => array('gid', 'oid', 'sid', 'pid'),
      ),
    ),
  );
}

/**
 * Implementation of hook_schema_alter().
 */
function rdf_schema_alter($schema) {
  // This is not executed on installation/uninstallation, but only when the
  // schema is loaded at runtime; it's needed in order for RDF repositories
  // created by third-party modules to have a schema without them having to
  // duplicate the definition of the {rdf_data} table, above.
  if (function_exists('rdf_db_get_repository_tables')) {
    foreach (rdf_db_get_repository_tables() as $table) {
      if ($table != RDF_DB_TABLE_DEFAULT) {
        $schema[$table] = $schema[RDF_DB_TABLE_DEFAULT];
      }
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
// Schema API updates

/**
 * Converts RDF DB tables from 6.x-1.0-alpha3 to 6.x-1.0-alpha4.
 */
function rdf_update_6000() {
  $updates = array();

  module_load_include('inc', 'rdf', 'rdf.db');
  foreach (rdf_db_get_repository_tables() as $table) {
    db_add_field($updates, $table, 'uid', array('type' => 'int', 'unsigned' => TRUE));
    db_add_field($updates, $table, 'created', array('type' => 'int', 'unsigned' => TRUE));
  }

  return $updates;
}
